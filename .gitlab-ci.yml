# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags:
  - windows
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - docker build -f SmartAgri-front/dockerfile -t $DOCKER_USERNAME/smartagri:front-1 ./SmartAgri-front/
    - docker build -f SmartAgri-backend/dockerfile -t $DOCKER_USERNAME/smartagri:back-1 ./SmartAgri-backend/
    - docker push $DOCKER_USERNAME/smartagri:front-1
    - docker push $DOCKER_USERNAME/smartagri:back-1

test-job:
  stage: deploy
  tags:
  - windows  
  script:
    - kubectl config set-cluster my-cluster --server=$KUBE_SERVER --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token=$KUBE_TOKEN
    - kubectl config set-context my-context --cluster=my-cluster --user=admin
    - kubectl config use-context my-context
    # Deploy Frontend
    - kubectl apply -f SmartAgri-front/k8s/deployment.yaml
    - kubectl apply -f SmartAgri-front/k8s/service.yaml
    # Deploy Backend
    - kubectl apply -f SmartAgri-backend/k8s/deployment.yaml
    - kubectl apply -f SmartAgri-backend/k8s/service.yaml
    # Apply Ingress
    - kubectl apply -f k8s/ingress.yaml
